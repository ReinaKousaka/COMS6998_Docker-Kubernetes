apiVersion: apps/v1
kind: Deployment
metadata: 
  name: flask-app
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  selector:
    matchLabels:
      app: flask-app
  template:
    metadata:
      labels:
        app: flask-app
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "5000"
    spec:
      containers:
        - name: flask-app
          image: sy3079/flask-app:latest
          ports:
            - containerPort: 5000
          env:
            - name: MONGO_HOST
              value: mongo
            - name: MONGO_PORT
              value: '27017'
          # livenessProbe:
          #   httpGet:
          #     path: /health
          #     port: 5000
          #   initialDelaySeconds: 30
          #   timeoutSeconds: 1
          #   periodSeconds: 10
          #   failureThreshold: 3
          # readinessProbe:
          #   httpGet:
          #     path: /health
          #     port: 5000
          #   initialDelaySeconds: 5
          #   timeoutSeconds: 1
          #   periodSeconds: 5
          #   failureThreshold: 3

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
    spec:
      containers:
        - name: mongo
          image: mongo:4.4
          ports:
            - containerPort: 27017
          volumeMounts:
            - name: mongo-data
              mountPath: /data/db
      volumes:
        - name: mongo-data
          persistentVolumeClaim:
            claimName: mongo-pvc

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongo-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mongo-pv
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: "/mnt/data"

---
apiVersion: v1
kind: Service
metadata:
  name: flask-app-service
spec:
  type: LoadBalancer
  selector:
    app: flask-app
  ports:
    - protocol: TCP
      port: 5000
      targetPort: 5000

---
apiVersion: v1
kind: Service
metadata:
  name: mongo
spec:
  type: LoadBalancer
  selector:
    app: mongo
  ports:
    - protocol: TCP
      port: 27017
      targetPort: 27017
